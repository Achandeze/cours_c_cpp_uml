Sorting
If our input is an unsorted list of numbers, there are many algorithms we could use to produce an output of a sorted list.
With eight volunteers on the stage with the following numbers, we might consider swapping pairs of numbers next to each other as a first step.
Our volunteers start in the following random order:
6 3 8 5 2 7 4 1
We look at the first two numbers, and swap them so they are in order:
6 3 8 5 2 7 4 1
– –
3 6 8 5 2 7 4 1
The next pair, 6 and 8, are in order, so we don’t need to swap them.
The next pair, 8 and 5, need to be swapped:
3 6 8 5 2 7 4 1
    – –
3 6 5 8 2 7 4 1
We continue until we reach the end of the list:
3 6 5 2 8 7 4 1
        – –
3 6 5 2 7 8 4 1
          – –
3 6 5 2 7 4 8 1
            – –
3 6 5 2 7 4 1 8
Our list isn’t sorted yet, but we’re slightly closer to the solution because the biggest value, 8, has been shifted all the way to the right.
We repeat this with another pass through the list:
3 6 5 2 7 4 1 8
– –
3 6 5 2 7 4 1 8
  – –
3 5 6 2 7 4 1 8
    – –
3 5 2 6 7 4 1 8
      – –
3 5 2 6 7 4 1 8
        – –
3 5 2 6 4 7 1 8
            – –
3 5 2 6 4 1 7 8
Note that we didn’t need to swap the 3 and 6, or the 6 and 7.
Now, the next biggest value, 7, moved all the way to the right. If we repeat this, more and more of the list becomes sorted, and pretty quickly we have a fully sorted list.
This algorithm is called bubble sort, where large values “bubble” to the right. The pseudocode for this might look like:
Repeat n–1 times
    For i from 0 to n–2
        If i'th and i+1'th elements out of order
            Swap them
Since we are comparing the i'th and i+1'th element, we only need to go up to n – 2 for i. Then, we swap the two elements if they’re out of order.
And we can stop after we’ve made n – 1 passes, since we know the largest n–1 elements will have bubbled to the right.
We have n – 2 steps for the inner loop, and n – 1 loops, so we get n2 – 3n + 2 steps total. But the largest factor, or dominant term, is n2, as n gets larger and larger, so we can say that bubble sort is O(n2).
We’ve seen running times like the following, and so even though binary search is much faster than linear search, it might not be worth the one–time cost of sorting the list first, unless we do lots of searches over time:
O(n2)
bubble sort
O(n log n)
O(n)
linear search
O(log n)
binary search
O(1)
And Ω for bubble sort is still n2, since we still check each pair of elements for n – 1 passes.
Selection sort
We can take another approach with the same set of numbers:
6 3 8 5 2 7 4 1
First, we’ll look at each number, and remember the smallest one we’ve seen. Then, we can swap it with the first number in our list, since we know it’s the smallest:
6 3 8 5 2 7 4 1
–             –
1 3 8 5 2 7 4 6
Now we know at least the first element of our list is in the right place, so we can look for the smallest element among the rest, and swap it with the next unsorted element (now the second element):
1 3 8 5 2 7 4 6
  –     –
1 2 8 5 3 7 4 6
We can repeat this over and over, until we have a sorted list.
This algorithm is called selection sort, and we might write pseudocode like this:
For i from 0 to n–1
    Find smallest item between i'th item and last item
    Swap smallest item with i'th item
With big O notation, we still have running time of O(n2), since we were looking at roughly all n elements to find the smallest, and making n passes to sort all the elements.
More formally, we can use some formulas to show that the biggest factor is indeed n2:
n + (n – 1) + (n – 2) + ... + 1
n(n + 1)/2
(n^2 + n)/2
n^2/2 + n/2
O(n^2)
So it turns out that selection sort is fundamentally about the same as bubble sort in running time:
O(n2)
bubble sort, selection sort
O(n log n)
O(n)
linear search
O(log n)
binary search
O(1)
The best case, Ω, is also n2.
We can go back to bubble sort and change its algorithm to be something like this, which will allow us to stop early if all the elements are sorted:
Repeat until no swaps
    For i from 0 to n–2
        If i'th and i+1'th elements out of order
            Swap them
Now, we only need to look at each element once, so the best case is now Ω(n):
Ω(n2)
selection sort
Ω(n log n)
Ω(n)
bubble sort
Ω(log n)
Ω(1)
linear search, binary search
We look at a visualization online comparing sorting algorithms with animations for how the elements move within arrays for both bubble sort and selection sort.
Recursion
Recall that in week 0, we had pseudocode for finding a name in a phone book, where we had lines telling us to “go back” and repeat some steps:
1  Pick up phone book
2  Open to middle of phone book
3  Look at page
4  If Smith is on page
5      Call Mike
6  Else if Smith is earlier in book
7      Open to middle of left half of book
8      **Go back to line 3**
9  Else if Smith is later in book
10     Open to middle of right half of book
11     **Go back to line 3**
12 Else
13     Quit
We could instead just repeat our entire algorithm on the half of the book we have left:
1  Pick up phone book
2  Open to middle of phone book
3  Look at page
4  If Smith is on page
5      Call Mike
6  Else if Smith is earlier in book
7      **Search left half of book**
8
9  Else if Smith is later in book
10     **Search right half of book**
11
12 Else
13     Quit
This seems like a cyclical process that will never end, but we’re actually dividing the problem in half each time, and stopping once there’s no more book left.
Recursion occurs when a function or algorithm refers to itself, as in the new pseudocode above.


Merge sort
We can take the idea of recusion to sorting, with another algorithm called merge sort. The pseudocode might look like:
If only one item
  Return
Else
    Sort left half of items
    Sort right half of items
    Merge sorted halves
We’ll best see this in practice with an unsorted list:
7 4 5 2 6 3 8 1
First, we’ll sort the left half (the first four elements):
7 4 5 2 | 6 3 8 1
– – – –
Well, to sort that, we need to sort the left half of the left half first:
7 4 | 5 2 | 6 3 8 1
– –
Now, we have just one item, 7, in the left half, and one item, 4, in the right half. So we’ll merge that together, by taking the smallest item from each list first:
– – | 5 2 | 6 3 8 1
4 7
And now we go back to the right half of the left half, and sort it:
– – | – – | 6 3 8 1
4 7 | 2 5
Now, both halves of the left half are sorted, so we can merge the two of them together. We look at the start of each list, and take 2 since it’s smaller than 4. Then, we take 4, since it’s now the smallest item at the front of both lists. Then, we take 5, and finally, 7, to get:
– – – – | 6 3 8 1
– – – –
2 4 5 7
We now sort the right half the same way. First, the left half of the right half:
– – – – | – – | 8 1
– – – – | 3 6 |
2 4 5 7
Then, the right half of the right half:
– – – – | – – | – –
– – – – | 3 6 | 1 8
2 4 5 7
We can merge the right half together now:
– – – – | – – – –
– – – – | – – – –
2 4 5 7 | 1 3 6 8
And finally, we can merge both halves of the whole list, following the same steps as before. Notice that we don’t need to check all the elements of each half to find the smallest, since we know that each half is already sorted. Instead, we just take the smallest element of the two at the start of each half:
– – – – | – – – –
– – – – | – – – –
2 4 5 7 | – 3 6 8
1
– – – – | – – – –
– – – – | – – – –
– 4 5 7 | – 3 6 8
1 2
– – – – | – – – –
– – – – | – – – –
– 4 5 7 | – – 6 8
1 2 3
– – – – | – – – –
– – – – | – – – –
– – 5 7 | – – 6 8
1 2 3 4
– – – – | – – – –
– – – – | – – – –
– – – 7 | – – 6 8
1 2 3 4   5
– – – – | – – – –
– – – – | – – – –
– – – 7 | – – – 8
1 2 3 4   5 6
– – – – | – – – –
– – – – | – – – –
– – – – | – – – 8
1 2 3 4   5 6 7
– – – – | – – – –
– – – – | – – – –
– – – – | – – – –
1 2 3 4   5 6 7 8
It took a lot of steps, but it actually took fewer steps than the other algorithms we’ve seen so far. We broke our list in half each time, until we were “sorting” eight lists with one element each:
7 | 4 | 5 | 2 | 6 | 3 | 8 | 1
4   7 | 2   5 | 3   6 | 1   8
2   4   5   7 | 1   3   6   8
1   2   3   4   5   6   7   8
Since our algorithm divided the problem in half each time, its running time is logarithmic with O(log n). And after we sorted each half (or half of a half), we needed to merge together all the elements, with n steps since we had to look at each element once.
So our total running time is O(n log n):
O(n2)
bubble sort, selection sort
O(n log n)
merge sort
O(n)
linear search
O(log n)
binary search
O(1)
Since log n is greater than 1 but less than n, n log n is in between n (times 1) and n2.
The best case, Ω, is still n log n, since we still sort each half first and then merge them together:
Ω(n2)
selection sort
Ω(n log n)
merge sort
Ω(n)
bubble sort
Ω(log n)
Ω(1)
linear search, binary search
Finally, there is another notation, Θ, Theta, which we use to describe running times of algorithms if the upper bound and lower bound is the same. For example, merge sort has Θ(n log n) since the best and worst case both require the same number of steps. And selection sort has Θ(n2).
We look at a final visualization of sorting algorithms with a larger number of inputs, running at the same time.
    https://www.youtube.com/watch?v=ZZuD6iUe3Pc
